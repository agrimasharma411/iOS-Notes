//
//  ARC example.swift
//  Digital Notes
//
//  Created by Agrima Sharma on 01/06/25.
//
//MARK: - retain cycle or strong reference cycle
/*
import Foundation

class Person {
   var car : Car?      // (write weak var instead- To break retain cycle )
}

class Car {
    var person : Person?
}

var john = Person()
var toyota = Car()

john.car = toyota
toyota.person = john

/*
                        ðŸ”„ The Retain Cycle  or Strong Reference Cycle
 
 Now both john and toyota are holding to each other.
 If we later write john = nil and toyota = nil,
 they wonâ€™t be destroyed from memory because they are still pointing to each other â€” this is called a retain cycle or strong reference cycle.
 
 |--------------------------------------------------------------|
 |ðŸš€ What causes a memory leak in iOS, and how do you fix it?   |
 |--------------------------------------------------------------|

       Hereâ€™s how to answer:----------->>>>>>>>>>>>>>>

 Memory Leak:
 A memory leak occurs when your app retains memory thatâ€™s no longer needed and fails to release it. Over time, this leads to increased memory usage, slower performance, and eventually an app crash.

 Common causes in iOS (Swift):
 â€¢ Strong reference cycles (retain cycles), especially:
 â€¢ Between view controllers and closures
 â€¢ Between parent and child objects (e.g., delegates)
 â€¢ Closures capturing self strongly
 â€¢ Unreleased observers (e.g., NotificationCenter)
 â€¢ Timers not invalidated
 â€¢ For Core Foundation objects, forgetting to call CFRelease

 How to fix it:
 â€¢ Use [weak self] or [unowned self] inside closures for reference types
 â€¢ Set delegates as weak if possible
 â€¢ Always remove observers in deinit
 â€¢ Invalidate timers when done
 â€¢ Release Core Foundation objects using CFRelease when manually retained
 â€¢ Use Xcode Instruments â†’ Leaks & Allocations to find and fix leaks


 */*
 */
 
